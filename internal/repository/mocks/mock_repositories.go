// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/auth_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/auth_service.go -destination=internal/repository/mocks/mock_repositories.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/zhavkk/gRPC_auth_service/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRefreshTokenRepository is a mock of RefreshTokenRepository interface.
type MockRefreshTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshTokenRepositoryMockRecorder
	isgomock struct{}
}

// MockRefreshTokenRepositoryMockRecorder is the mock recorder for MockRefreshTokenRepository.
type MockRefreshTokenRepositoryMockRecorder struct {
	mock *MockRefreshTokenRepository
}

// NewMockRefreshTokenRepository creates a new mock instance.
func NewMockRefreshTokenRepository(ctrl *gomock.Controller) *MockRefreshTokenRepository {
	mock := &MockRefreshTokenRepository{ctrl: ctrl}
	mock.recorder = &MockRefreshTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshTokenRepository) EXPECT() *MockRefreshTokenRepositoryMockRecorder {
	return m.recorder
}

// DeleteRefreshToken mocks base method.
func (m *MockRefreshTokenRepository) DeleteRefreshToken(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshToken", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockRefreshTokenRepositoryMockRecorder) DeleteRefreshToken(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockRefreshTokenRepository)(nil).DeleteRefreshToken), ctx, userID)
}

// GetRefreshTokenJTI mocks base method.
func (m *MockRefreshTokenRepository) GetRefreshTokenJTI(ctx context.Context, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshTokenJTI", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshTokenJTI indicates an expected call of GetRefreshTokenJTI.
func (mr *MockRefreshTokenRepositoryMockRecorder) GetRefreshTokenJTI(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTokenJTI", reflect.TypeOf((*MockRefreshTokenRepository)(nil).GetRefreshTokenJTI), ctx, userID)
}

// StoreRefreshToken mocks base method.
func (m *MockRefreshTokenRepository) StoreRefreshToken(ctx context.Context, userID, tokenJTI string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRefreshToken", ctx, userID, tokenJTI, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreRefreshToken indicates an expected call of StoreRefreshToken.
func (mr *MockRefreshTokenRepositoryMockRecorder) StoreRefreshToken(ctx, userID, tokenJTI, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRefreshToken", reflect.TypeOf((*MockRefreshTokenRepository)(nil).StoreRefreshToken), ctx, userID, tokenJTI, ttl)
}

// MockProfileRepository is a mock of ProfileRepository interface.
type MockProfileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProfileRepositoryMockRecorder
	isgomock struct{}
}

// MockProfileRepositoryMockRecorder is the mock recorder for MockProfileRepository.
type MockProfileRepositoryMockRecorder struct {
	mock *MockProfileRepository
}

// NewMockProfileRepository creates a new mock instance.
func NewMockProfileRepository(ctrl *gomock.Controller) *MockProfileRepository {
	mock := &MockProfileRepository{ctrl: ctrl}
	mock.recorder = &MockProfileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileRepository) EXPECT() *MockProfileRepositoryMockRecorder {
	return m.recorder
}

// CreateProfile mocks base method.
func (m *MockProfileRepository) CreateProfile(ctx context.Context, p *models.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockProfileRepositoryMockRecorder) CreateProfile(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockProfileRepository)(nil).CreateProfile), ctx, p)
}

// GetProfileByID mocks base method.
func (m *MockProfileRepository) GetProfileByID(ctx context.Context, id string) (*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileByID", ctx, id)
	ret0, _ := ret[0].(*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileByID indicates an expected call of GetProfileByID.
func (mr *MockProfileRepositoryMockRecorder) GetProfileByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileByID", reflect.TypeOf((*MockProfileRepository)(nil).GetProfileByID), ctx, id)
}

// GetProfileByUsername mocks base method.
func (m *MockProfileRepository) GetProfileByUsername(ctx context.Context, username string) (*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileByUsername", ctx, username)
	ret0, _ := ret[0].(*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileByUsername indicates an expected call of GetProfileByUsername.
func (mr *MockProfileRepositoryMockRecorder) GetProfileByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileByUsername", reflect.TypeOf((*MockProfileRepository)(nil).GetProfileByUsername), ctx, username)
}

// UpdatePassword mocks base method.
func (m *MockProfileRepository) UpdatePassword(ctx context.Context, id, newPass string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, id, newPass)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockProfileRepositoryMockRecorder) UpdatePassword(ctx, id, newPass any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockProfileRepository)(nil).UpdatePassword), ctx, id, newPass)
}

// UpdateRole mocks base method.
func (m *MockProfileRepository) UpdateRole(ctx context.Context, id, newRole string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", ctx, id, newRole)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockProfileRepositoryMockRecorder) UpdateRole(ctx, id, newRole any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockProfileRepository)(nil).UpdateRole), ctx, id, newRole)
}

// UpdateUsername mocks base method.
func (m *MockProfileRepository) UpdateUsername(ctx context.Context, id, newUsername string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsername", ctx, id, newUsername)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUsername indicates an expected call of UpdateUsername.
func (mr *MockProfileRepositoryMockRecorder) UpdateUsername(ctx, id, newUsername any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsername", reflect.TypeOf((*MockProfileRepository)(nil).UpdateUsername), ctx, id, newUsername)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, user)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepository) GetUserByEmail(ctx context.Context, email string) (*models.UserFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*models.UserFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositoryMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockUserRepository) GetUserByID(ctx context.Context, id string) (*models.UserFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*models.UserFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepositoryMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepository)(nil).GetUserByID), ctx, id)
}

// UpdateUser mocks base method.
func (m *MockUserRepository) UpdateUser(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryMockRecorder) UpdateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), ctx, user)
}

// MockArtistRepository is a mock of ArtistRepository interface.
type MockArtistRepository struct {
	ctrl     *gomock.Controller
	recorder *MockArtistRepositoryMockRecorder
	isgomock struct{}
}

// MockArtistRepositoryMockRecorder is the mock recorder for MockArtistRepository.
type MockArtistRepositoryMockRecorder struct {
	mock *MockArtistRepository
}

// NewMockArtistRepository creates a new mock instance.
func NewMockArtistRepository(ctrl *gomock.Controller) *MockArtistRepository {
	mock := &MockArtistRepository{ctrl: ctrl}
	mock.recorder = &MockArtistRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtistRepository) EXPECT() *MockArtistRepositoryMockRecorder {
	return m.recorder
}

// CreateArtist mocks base method.
func (m *MockArtistRepository) CreateArtist(ctx context.Context, artist *models.Artist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArtist", ctx, artist)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateArtist indicates an expected call of CreateArtist.
func (mr *MockArtistRepositoryMockRecorder) CreateArtist(ctx, artist any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArtist", reflect.TypeOf((*MockArtistRepository)(nil).CreateArtist), ctx, artist)
}

// GetArtistByAuthor mocks base method.
func (m *MockArtistRepository) GetArtistByAuthor(ctx context.Context, author string) (*models.ArtistFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistByAuthor", ctx, author)
	ret0, _ := ret[0].(*models.ArtistFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistByAuthor indicates an expected call of GetArtistByAuthor.
func (mr *MockArtistRepositoryMockRecorder) GetArtistByAuthor(ctx, author any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistByAuthor", reflect.TypeOf((*MockArtistRepository)(nil).GetArtistByAuthor), ctx, author)
}

// GetArtistByID mocks base method.
func (m *MockArtistRepository) GetArtistByID(ctx context.Context, id string) (*models.ArtistFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistByID", ctx, id)
	ret0, _ := ret[0].(*models.ArtistFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistByID indicates an expected call of GetArtistByID.
func (mr *MockArtistRepositoryMockRecorder) GetArtistByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistByID", reflect.TypeOf((*MockArtistRepository)(nil).GetArtistByID), ctx, id)
}

// UpdateArtist mocks base method.
func (m *MockArtistRepository) UpdateArtist(ctx context.Context, artist *models.Artist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArtist", ctx, artist)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateArtist indicates an expected call of UpdateArtist.
func (mr *MockArtistRepositoryMockRecorder) UpdateArtist(ctx, artist any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArtist", reflect.TypeOf((*MockArtistRepository)(nil).UpdateArtist), ctx, artist)
}
